name: Tests and Quality Checks

on:
  push:
    branches: [ main, develop, homolog ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    runs-on: ubuntu-22.04
    name: Code Quality Checks
    if: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run ruff linter
      run: |
        ruff check . --output-format=github

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports

    - name: Security analysis with bandit
      run: |
        bandit -r server.py -f json -o bandit-report.json
        bandit -r server.py -f txt

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  unit-tests:
    runs-on: ubuntu-22.04
    name: Unit Tests (Disabled)
    if: false
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit \
          --cov=server \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=junit.xml \
          --html=reports/pytest-report.html \
          --self-contained-html \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/
          reports/

  integration-tests:
    runs-on: ubuntu-22.04
    name: Integration Tests (Disabled)
    if: false
    services:
      firebird:
        image: jacobalberty/firebird:v3.0
        env:
          FIREBIRD_DATABASE: test_db
          FIREBIRD_USER: SYSDBA
          FIREBIRD_PASSWORD: masterkey
          ISC_PASSWORD: masterkey
          EnableLegacyClientAuth: true
          FIREBIRD_CONF: |
            ServerMode = SuperServer
            DatabaseAccess = Full
            UserManager = Srp
        ports:
          - 3050:3050
        options: >-
          --health-cmd "nc -z localhost 3050"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 30
          --health-start-period 60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Wait for Firebird to be ready
      run: |
        echo "Waiting for Firebird service to be healthy..."
        for i in {1..30}; do
          if nc -z localhost 3050; then
            echo "Port 3050 is open, testing connection..."
            # Try a simple query to verify Firebird is really ready
            if timeout 10 python3 -c "import fdb; conn = fdb.connect(host='localhost', database='/firebird/data/test_db.fdb', user='SYSDBA', password='masterkey'); conn.close(); print('✅ Firebird connection successful')"; then
              echo "Firebird is ready and accepting connections"
              break
            else
              echo "Port open but Firebird not ready yet..."
            fi
          else
            echo "Waiting for Firebird port 3050... ($i/30)"
          fi
          sleep 10
        done

    - name: Run integration tests
      env:
        FIREBIRD_HOST: localhost
        FIREBIRD_PORT: 3050
        FIREBIRD_DATABASE: /firebird/data/test_db.fdb
        FIREBIRD_USER: SYSDBA
        FIREBIRD_PASSWORD: masterkey
        FIREBIRD_CHARSET: UTF8
      run: |
        pytest tests/integration \
          --junit-xml=integration-junit.xml \
          --html=reports/integration-report.html \
          --self-contained-html \
          -v \
          -x

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-junit.xml
          reports/integration-report.html

    - name: Debug Firebird container
      if: failure()
      run: |
        echo "🔍 Debugging Firebird container..."
        docker ps -a
        echo "📋 Firebird container logs:"
        docker logs $(docker ps -a --filter ancestor=jacobalberty/firebird:v3.0 --format "{{.ID}}" | head -1) || echo "No container found"
        echo "🌐 Network connectivity:"
        nc -zv localhost 3050 || echo "Port 3050 not accessible"

  security-scan:
    runs-on: ubuntu-22.04
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  pre-commit:
    runs-on: ubuntu-22.04
    name: Pre-commit Hooks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

  test-summary:
    runs-on: ubuntu-22.04
    name: Test Summary
    needs: [lint-and-format]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        LINT_RESULT="${{ needs.lint-and-format.result }}"
        
        echo "| Test Type | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | $LINT_RESULT |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any test failed
        if [[ "$LINT_RESULT" != "success" ]]; then
          echo "❌ Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi
